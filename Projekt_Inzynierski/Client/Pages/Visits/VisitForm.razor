@page "/visitAdd"
@page "/visitForm/{FormMode}/{CurrentID}"
@using Projekt_Inzynierski.Core.DTOs;
@inject NavigationManager NavigationManager
@inject HttpClient _httpClient

<h3>Wizyta</h3>
<hr />
<div class="row">
    <div class="col-md-4">
        <EditForm Model="@visitDto" OnValidSubmit=@OnValidSubmit class="vstack gap-3">
            <FluentValidationValidator />
            <div class="form-group" hidden>
                <input for="Id" class="form-control" @bind="@visitDto.Id" />
            </div>
            <div class="form-group">
                <div class="input-group">
                    <label for="Client" class="input-group-text col-md-3">Klient:</label>
                    <InputSelect @bind-Value="@visitDto.ClientId" class="form-control" disabled="@isDisabled">
                        <option selected style="display:none"> -- wybierz klienta -- </option>
                        @if (clients != null)
                        {
                            @foreach (var client in clients)
                            {
                                <option value="@client.Id">@client.FirstName @client.LastName, @client.Pesel</option>
                            }
                        }
                    </InputSelect>
                </div>
                <ValidationMessage For="@(() => visitDto.ClientId)" />
            </div>
            <br />
            <div class="form-group ms-auto">
                <input type="submit" class="btn btn-primary" value=@(FormMode != "edit" ? "Zapisz" : "Aktualizuj") />
                <input type="button" class="btn btn-primary" @onclick=@Cancel value="Anuluj" />
            </div>
        </EditForm>
    </div>
</div>
@code {
    [Parameter]
    public string CurrentID { get; set; }
    [Parameter]
    public string FormMode { get; set; }

    VisitDto visitDto = new VisitDto();
    ICollection<ClientAccountDto> clients = new List<ClientAccountDto>();
    bool isDisabled;

    protected override async Task OnInitializedAsync()
    {
        if (FormMode == "details")
        {
            isDisabled = true;
        }
        clients = await _httpClient.GetFromJsonAsync<ICollection<ClientAccountDto>>("api/client");
        if (FormMode == "edit" || FormMode == "details")
        {
            var fetchedVisit = await _httpClient.GetFromJsonAsync<VisitDto>($"api/visit/{CurrentID}");
            if (fetchedVisit != null)
            {
                visitDto = fetchedVisit;
            }
        }

    }

    protected void OnValidSubmit()
    {
        if (FormMode != "edit")
        {
            CreateVisit();
        }
        else
        {
            UpdateVisit();
        }
    }

    protected async void CreateVisit()
    {
        await _httpClient.PostAsJsonAsync("api/visit", visitDto);
        NavigationManager.NavigateTo("visitList");
    }

    protected async void UpdateVisit()
    {
        await _httpClient.PutAsJsonAsync($"api/visit/{CurrentID}", visitDto);
        NavigationManager.NavigateTo("visitList");
    }
    void Cancel()
    {
        NavigationManager.NavigateTo("visitList");
    }
}
@page "/trainerAdd"
@page "/trainerForm/{FormMode}/{CurrentID}"
@using Projekt_Inzynierski.Core.DTOs;
@inject NavigationManager NavigationManager
@inject HttpClient _httpClient

<h3>Dane Trenera</h3>
<hr />
<div>
    <div class="row">
        @if (FormMode is null)
        {
            <div class="col-md-4">
                <EditForm Model="@trainerAccountDto" OnValidSubmit=@OnValidSubmit class="vstack gap-3">
                    <FluentValidationValidator />
                    <div class="form-group" hidden>
                        <input for="Id" class="form-control" @bind="@trainerAccountDto.Id" />
                    </div>
                    <div class="form-group">
                        <div class="input-group">
                            <label for="Email" class="input-group-text col-md-3">Email:</label>
                            <InputText @bind-Value="@trainerAccountDto.Email" class="form-control" disabled="@isDisabled"></InputText>
                        </div>
                        <ValidationMessage For="@(() => trainerAccountDto.Email)" />
                    </div>
                    <div class="form-group">
                        <div class="input-group">
                            <label for="Password" class="input-group-text col-md-3">Hasło:</label>
                            <InputText @bind-Value="@trainerAccountDto.Password" class="form-control" type="password" disabled="@isDisabled"></InputText>
                        </div>
                        <ValidationMessage For="@(() => trainerAccountDto.Password)" />
                    </div>
                    <div class="form-group">
                        <div class="input-group">
                            <label for="ConfirmPassword" class="input-group-text col-md-3">Powtórz hasło:</label>
                            <InputText @bind-Value="@trainerAccountDto.ConfirmPassword" class="form-control" type="password" disabled="@isDisabled"></InputText>
                        </div>
                        <ValidationMessage For="@(() => trainerAccountDto.ConfirmPassword)" />
                    </div>
                    <div class="form-group">
                        <div class="input-group">
                            <label for="FirstName" class="input-group-text col-md-3">Imię:</label>
                            <InputText @bind-Value="@trainerAccountDto.FirstName" class="form-control" disabled="@isDisabled"></InputText>
                        </div>
                        <ValidationMessage For="@(() => trainerAccountDto.FirstName)" />
                    </div>
                    <div class="form-group">
                        <div class="input-group">
                            <label for="LastName" class="input-group-text col-md-3">Nazwisko:</label>
                            <InputText @bind-Value="@trainerAccountDto.LastName" class="form-control" disabled="@isDisabled"></InputText>
                        </div>
                        <ValidationMessage For="@(() => trainerAccountDto.LastName)" />
                    </div>
                    <div class="form-group">
                        <div class="input-group">
                            <label for="PhoneNr" class="input-group-text col-md-3">Numer tel.:</label>
                            <InputText @bind-Value="@trainerAccountDto.PhoneNr" class="form-control" disabled="@isDisabled"></InputText>
                        </div>
                        <ValidationMessage For="@(() => trainerAccountDto.PhoneNr)" />
                    </div>
                    <div class="form-group">
                        <div class="input-group">
                            <label for="Pesel" class="input-group-text col-md-3">Pesel:</label>
                            <InputText @bind-Value="@trainerAccountDto.Pesel" class="form-control" disabled="@isDisabled"></InputText>
                        </div>
                        <ValidationMessage For="@(() => trainerAccountDto.Pesel)" />
                    </div>
                    <div class="form-group">
                        <div class="input-group">
                            <label for="Sal" class="input-group-text col-md-3">Wynagrodzenie:</label>
                            <InputNumber @bind-Value="@trainerAccountDto.Salary" class="form-control" disabled="@isDisabled"></InputNumber>
                        </div>
                        <ValidationMessage For="@(() => trainerAccountDto.Salary)" />
                        <ValidationMessage For="@(() => trainerAccountDto.SpecializationIds)" />
                    </div>
                    <br />
                    <div class="form-group ms-auto">
                        <input type="submit" class="btn btn-primary" value=@(FormMode != "edit" ? "Zapisz" : "Aktualizuj") />
                        <input type="button" class="btn btn-primary" @onclick=@Cancel value="Anuluj" />
                    </div>
                </EditForm>
            </div>
            <div class="col-auto">
                <div class="vstack gap-3">
                    <div class="hstack gap-2">
                        <label for="Spec" class="control-label fs-5">Specjalizacje</label>
                        <button @onclick="AddValue" class="btn btn-success">+</button>
                    </div>
                    @for (int i = 0; i < specializationIds.Count; i++)
                    {
                        int index = i;
                        <div class="d-flex justify-content-between align-items-baseline hstack gap-2">
                            <select form="Spec" class="form-control" @onchange="(e) => UpdateValue(index, Convert.ToInt32(e.Value))" value="@specializationIds[i]">
                                <option selected style="display:none"> -- wybierz specjalizację -- </option>
                                @if (specializations != null)
                                {
                                    @foreach (var spec in specializations)
                                    {
                                        <option value="@spec.Id">@spec.SpecName</option>
                                    }
                                }
                            </select>
                            <button @onclick="() => RemoveValue(index)" class="btn btn-outline-danger">X</button>
                        </div>
                    }
                </div>
            </div>
        }
        else
        {
            <div class="col-md-4">
                <EditForm Model="@trainerViewDto" OnValidSubmit=@OnValidSubmit class="vstack gap-3">
                    <FluentValidationValidator />
                    <div class="form-group" hidden>
                        <input for="Id" class="form-control" @bind="@trainerViewDto.Id" />
                    </div>
                    <div class="form-group">
                        <div class="input-group">
                            <label for="Email" class="input-group-text col-md-3">Email:</label>
                            <InputText @bind-Value="@trainerViewDto.Email" class="form-control" disabled="@isDisabled"></InputText>
                        </div>
                        <ValidationMessage For="@(() => trainerViewDto.Email)" />
                    </div>
                    <div class="form-group">
                        <div class="input-group">
                            <label for="FirstName" class="input-group-text col-md-3">Imię:</label>
                            <InputText @bind-Value="@trainerViewDto.FirstName" class="form-control" disabled="@isDisabled"></InputText>
                        </div>
                        <ValidationMessage For="@(() => trainerViewDto.FirstName)" />
                    </div>
                    <div class="form-group">
                        <div class="input-group">
                            <label for="LastName" class="input-group-text col-md-3">Nazwisko:</label>
                            <InputText @bind-Value="@trainerViewDto.LastName" class="form-control" disabled="@isDisabled"></InputText>
                        </div>
                        <ValidationMessage For="@(() => trainerViewDto.LastName)" />
                    </div>
                    <div class="form-group">
                        <div class="input-group">
                            <label for="PhoneNr" class="input-group-text col-md-3">Numer tel.:</label>
                            <InputText @bind-Value="@trainerViewDto.PhoneNr" class="form-control" disabled="@isDisabled"></InputText>
                        </div>
                        <ValidationMessage For="@(() => trainerViewDto.PhoneNr)" />
                    </div>
                    <div class="form-group">
                        <div class="input-group">
                            <label for="Pesel" class="input-group-text col-md-3">Pesel:</label>
                            <InputText @bind-Value="@trainerViewDto.Pesel" class="form-control" disabled="@isDisabled"></InputText>
                        </div>
                        <ValidationMessage For="@(() => trainerViewDto.Pesel)" />
                    </div>
                    <div class="form-group">
                        <div class="input-group">
                            <label for="Sal" class="input-group-text col-md-3">Wynagrodzenie:</label>
                            <InputNumber @bind-Value="@trainerViewDto.Salary" class="form-control" disabled="@isDisabled"></InputNumber>
                        </div>
                        <ValidationMessage For="@(() => trainerViewDto.Salary)" />
                        <ValidationMessage For="@(() => trainerViewDto.SpecializationIds)" />
                    </div>
                    <br />
                    @if (!isDisabled)
                    {
                        <div class="form-group ms-auto hstack gap-1">
                            <input type="submit" class="btn btn-primary" value=@(FormMode != "edit" ? "Zapisz" : "Aktualizuj") />
                            <input type="button" class="btn btn-primary" @onclick=@Cancel value="Anuluj" />
                            @if (FormMode == "edit" && trainerViewDto.EmployedTo is null)
                            {
                                <input type="button" class="btn btn-danger" @onclick=@EndEmployment value="Koniec zatrudnienia" />
                            }
                            else if (FormMode == "edit" && !(trainerViewDto.EmployedTo is null))
                            {
                                <input type="button" class="btn btn-success" @onclick=@ContinueEmployment value="Wznów zatrudnienie" />
                            }
                        </div>
                    }  
                </EditForm>
            </div>
            <div class="col-md-auto">
                <div class="vstack gap-3">
                    <div class="hstack gap-2">
                        <label for="Spec" class="control-label fs-5">Specjalizacje</label>
                        @if (!isDisabled)
                        {
                            <button @onclick="AddValue" class="btn btn-success">+</button>
                        }
                    </div>
                    @for (int i = 0; i < trainerViewDto.SpecializationIds.Count; i++)
                    {
                        int index = i;
                        <div class="d-flex justify-content-between align-items-baseline hstack gap-2">
                            <select form="Spec" class="form-control" @onchange="(e) => UpdateValue(index, Convert.ToInt32(e.Value))" value="@specializationIds[i]" disabled="@isDisabled">
                                <option selected style="display:none"> -- wybierz specjalizację -- </option>
                                @if (specializations != null)
                                {
                                    @foreach (var spec in specializations)
                                    {
                                        <option value="@spec.Id">@spec.SpecName</option>
                                    }
                                }
                            </select>
                            @if (!isDisabled)
                            {
                                <button @onclick="() => RemoveValue(index)" class="btn btn-outline-danger">X</button>
                            }
                        </div>
                    }
                </div>
            </div>
        }
        @if (isDisabled)
        {
            <h3>Prowadzone treningi</h3>
            @if (trainerViewDto.CreatedGroupTrainings == null)
            {
                <p><em>Ładowanie...</em></p>
            }
            else
            {
                <table class="table table-striped">
                    <thead>
                        <tr>
                            <th>Typ treningu</th>
                            @*<th>Trener prowadzący</th>*@
                            <th>Limit miejsc</th>
                            <th>Ilość wolnych miejsc</th>
                            <th>Data i godzina rozpoczęcia</th>
                            <th>Dodatkowi Trenerzy</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var groupTraining in trainerViewDto.CreatedGroupTrainings)
                        {
                            <tr>
                                <td>@groupTraining.TrainingType</td>
                                @*<td>@groupTraining.CreatedByTrainer.FirstName @groupTraining.CreatedByTrainer.LastName</td>*@
                                <td>@groupTraining.MaxClients</td>
                                <td>@groupTraining.FreeSpots</td>
                                <td>@groupTraining.StartDate.ToShortDateString() @groupTraining.StartDate.ToShortTimeString()</td>
                                <td>
                                    @foreach (var trainer in groupTraining.Trainers)
                                    {
                                        <p>@trainer.FirstName @trainer.LastName</p>
                                    }
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
        }

    </div>
</div>

@code {
    [Parameter]
    public string CurrentID { get; set; }
    [Parameter]
    public string FormMode { get; set; }

    ICollection<SpecializationDto> specializations = new List<SpecializationDto>();
    TrainerAccountDto trainerAccountDto = new TrainerAccountDto();
    TrainerViewDto trainerViewDto = new TrainerViewDto();
    List<int> specializationIds = new List<int>();
    //List<GroupTrainingDto> allTrainings = new List<GroupTrainingDto>();
    bool isDisabled;

    protected override async Task OnInitializedAsync()
    {
        if (FormMode == "details")
        {
            isDisabled = true;
        }
        specializations = await _httpClient.GetFromJsonAsync<ICollection<SpecializationDto>>("api/specialization");
        @if (FormMode == "edit" || FormMode == "details")
        {
            var fetchedTrainer = await _httpClient.GetFromJsonAsync<TrainerViewDto>($"api/trainer/{CurrentID}");
            if (fetchedTrainer != null)
            {
                trainerViewDto = fetchedTrainer;
                specializationIds = trainerViewDto.SpecializationIds;
            }
            //if (FormMode == "details")
            //{
            //    allTrainings.AddRange(trainerViewDto.CreatedGroupTrainings);
            //    allTrainings.AddRange(trainerViewDto.GroupTrainings);
            //}
        }
    }

    protected void OnValidSubmit()
    {
        if (FormMode != "edit")
        {
            CreateTrainer();
        }
        else
        {
            UpdateTrainer();
        }
    }

    protected async void CreateTrainer()
    {
        trainerAccountDto.SpecializationIds = specializationIds;
        await _httpClient.PostAsJsonAsync("api/trainer", trainerAccountDto);
        NavigationManager.NavigateTo("trainerList");
    }

    protected async void UpdateTrainer()
    {
        trainerViewDto.SpecializationIds = specializationIds;
        await _httpClient.PutAsJsonAsync($"api/trainer/{CurrentID}", trainerViewDto);
        NavigationManager.NavigateTo("trainerList");
    }

    protected void EndEmployment()
    {
        trainerViewDto.EmployedTo = DateTime.Today.AddMonths(1);
        UpdateTrainer();
    }

    protected void ContinueEmployment()
    {
        trainerViewDto.EmployedTo = null;
        UpdateTrainer();
    }

    void Cancel()
    {
        NavigationManager.NavigateTo("trainerList");
    }

    private void AddValue() => specializationIds.Add(0);
    private void UpdateValue(int i, int value) => specializationIds[i] = value;
    private void RemoveValue(int i) => specializationIds.RemoveAt(i);
}

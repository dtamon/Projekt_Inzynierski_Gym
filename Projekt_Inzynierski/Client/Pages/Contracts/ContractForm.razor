@page "/contractAdd"
@page "/contractForm/{FormMode}/{CurrentID}"
@using Projekt_Inzynierski.Core.DTOs;
@inject NavigationManager NavigationManager
@inject HttpClient _httpClient

<h3>Umowa</h3>
<hr />
<div class="row">
    <div class="col-md-4">
        <EditForm Model="@contractDto" OnValidSubmit=@OnValidSubmit class="vstack gap-3">
            <FluentValidationValidator />
            <div class="form-group" hidden>
                <input for="Id" class="form-control" @bind="@contractDto.Id" />
            </div>
            <div class="form-group">
                <div class="input-group">
                    <label for="Months" class="input-group-text col-md-3">Okres miesięcy:</label>
                    <InputNumber @bind-Value="@contractDto.Months" class="form-control" disabled="@isDisabled"></InputNumber>
                </div>
                <ValidationMessage For="@(() => contractDto.Months)" />
            </div>
            <div class="form-group">
                <div class="input-group">
                    <label for="MonthlyCost" class="input-group-text col-md-3">Koszt miesięcznie:</label>
                    <InputNumber @bind-Value="@contractDto.MonthlyCost" class="form-control" disabled="@isDisabled"></InputNumber>
                </div>
                <ValidationMessage For="@(() => contractDto.MonthlyCost)" />
            </div>
            <br />
            <div class="form-group ms-auto">
                <input type="submit" class="btn btn-primary" value=@(FormMode != "edit" ? "Zapisz" : "Aktualizuj") />
                <input type="button" class="btn btn-primary" @onclick=@Cancel value="Anuluj" />
            </div>
        </EditForm>
    </div>
</div>
@code {
    [Parameter]
    public string CurrentID { get; set; }
    [Parameter]
    public string FormMode { get; set; }

    ContractDto contractDto = new ContractDto();
    bool isDisabled;

    protected override async Task OnInitializedAsync()
    {
        if (FormMode == "details")
        {
            isDisabled = true;
        }
        @if (FormMode == "edit")
        {
            var fetchedContract = await _httpClient.GetFromJsonAsync<ContractDto>($"api/contract/{CurrentID}");
            if (fetchedContract != null)
            {
                contractDto = fetchedContract;
            }
        }
    }

    protected void OnValidSubmit()
    {
        if (FormMode != "edit")
        {
            CreateContract();
        }
        else
        {
            UpdateContract();
        }
    }

    protected async void CreateContract()
    {
        await _httpClient.PostAsJsonAsync("api/contract", contractDto);
        NavigationManager.NavigateTo("contractList");
    }

    protected async void UpdateContract()
    {
        await _httpClient.PutAsJsonAsync($"api/contract/{CurrentID}", contractDto);
        NavigationManager.NavigateTo("contractList");
    }
    void Cancel()
    {
        NavigationManager.NavigateTo("contractList");
    }
}

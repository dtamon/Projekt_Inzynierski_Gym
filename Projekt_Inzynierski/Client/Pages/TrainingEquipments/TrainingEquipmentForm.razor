@page "/equipmentAdd"
@page "/equipmentForm/{FormMode}/{CurrentID}"
@using Projekt_Inzynierski.Core.DTOs;
@attribute [Authorize(Roles = "Employee")]
@inject AuthenticationStateProvider authStateProvider
@inject NavigationManager NavigationManager
@inject HttpClient _httpClient

<h3>Urządzenie</h3>
<hr />
<div class="row">
    <div class="col-md-4">
        <EditForm Model="@equipmentDto" OnValidSubmit=@OnValidSubmit class="vstack gap-3">
            <FluentValidationValidator />
            <div class="form-group" hidden>
                <input for="IdContract" class="form-control" @bind="@equipmentDto.Id" />
            </div>
            <div class="form-group">
                <div class="input-group">
                    <label for="SerialNr" class="input-group-text col-md-3">Numer seryjny:</label>
                    <InputText @bind-Value="@equipmentDto.SerialNr" class="form-control" disabled="@isDisabled"></InputText>
                </div>
                <ValidationMessage For="@(() => equipmentDto.SerialNr)" />
            </div>
            <br />
            <div class="form-group">
                <div class="input-group">
                    <label for="TechnicalState" class="input-group-text col-md-3">Czy jest sprawny?</label>
                    <div class="form-control">
                        <InputCheckbox @bind-Value="@equipmentDto.TechnicalState" class="form-check-input" disabled="@isDisabled" />
                    </div>
                </div>
            </div>
            <br />
            @if (!isDisabled)
            {
                <div class="form-group ms-auto">
                    <input type="submit" class="btn btn-primary" value=@(FormMode != "edit" ? "Zapisz" : "Aktualizuj") />
                    <input type="button" class="btn btn-primary" @onclick=@Cancel value="Anuluj" />
                </div>
            }
        </EditForm>
    </div>
</div>
@code {
    [Parameter]
    public string CurrentID { get; set; }
    [Parameter]
    public string FormMode { get; set; }

    TrainingEquipmentDto equipmentDto = new TrainingEquipmentDto();
    bool isDisabled;

    protected override async Task OnInitializedAsync()
    {
        var customAuthStateProvider = (CustomAuthenticationStateProvider)authStateProvider;
        var token = await customAuthStateProvider.GetToken();
        if (!string.IsNullOrEmpty(token))
        {
            _httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);
            if (FormMode == "details")
            {
                isDisabled = true;
            }
            if (FormMode == "edit" || FormMode == "details")
            {
                var fetchedEquipment = await _httpClient.GetFromJsonAsync<TrainingEquipmentDto>($"api/trainingEquipment/{CurrentID}");
                if (fetchedEquipment != null)
                {
                    equipmentDto = fetchedEquipment;
                }
            }
        }
        else
        {
            NavigationManager.NavigateTo("/login");
        }
    }

    protected void OnValidSubmit()
    {
        if (FormMode != "edit")
        {
            CreateTrainingEquipment();
        }
        else
        {
            UpdateTrainingEquipment();

        }
    }

    protected async void CreateTrainingEquipment()
    {
        var customAuthStateProvider = (CustomAuthenticationStateProvider)authStateProvider;
        var token = await customAuthStateProvider.GetToken();
        if (!string.IsNullOrEmpty(token))
        {
            _httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);
            await _httpClient.PostAsJsonAsync("api/trainingEquipment", equipmentDto);
            NavigationManager.NavigateTo("equipmentList");
        }
        else
        {
            NavigationManager.NavigateTo("/login");
        }
    }

    protected async void UpdateTrainingEquipment()
    {
        var customAuthStateProvider = (CustomAuthenticationStateProvider)authStateProvider;
        var token = await customAuthStateProvider.GetToken();
        if (!string.IsNullOrEmpty(token))
        {
            _httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);
            await _httpClient.PutAsJsonAsync($"api/trainingEquipment/{CurrentID}", equipmentDto);
            NavigationManager.NavigateTo("equipmentList");
        }
        else
        {
            NavigationManager.NavigateTo("/login");
        }
    }
    void Cancel()
    {
        NavigationManager.NavigateTo("equipmentList");
    }
}
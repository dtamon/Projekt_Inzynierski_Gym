@page "/trainerAdd"
@page "/trainerForm/{FormMode}/{CurrentID}"
@using Projekt_Inzynierski.Core.DTOs;
@inject NavigationManager NavigationManager
@inject HttpClient _httpClient

<h3>Dane Trenera</h3>
<hr />
<div class="d-flex justify-content-between align-items-baseline">
    <EditForm Model="@trainerDto" OnValidSubmit=@OnValidSubmit>
        <FluentValidationValidator />
        <div class="d-flex flex-column">
            <div class="form-group" hidden>
                <input for="Id" class="form-control" @bind="@trainerDto.Id" />
            </div>
            <div class="row form-group">
                <div class="input-group">
                    <label for="Email" class="input-group-text col-md-2">Email:</label>
                    <InputText @bind-Value="@trainerDto.Email" class="form-control" disabled="@isDisabled"></InputText>
                </div>
                <ValidationMessage For="@(() => trainerDto.Email)" />
            </div>
            <div class="row form-group">
                <div class="input-group">
                    <label for="Password" class="input-group-text col-md-2">Hasło:</label>
                    <InputText @bind-Value="@trainerDto.Password" class="form-control" type="password" disabled="@isDisabled"></InputText>
                </div>
                <ValidationMessage For="@(() => trainerDto.Password)" />
            </div>
            <div class="row form-group">
                <div class="input-group">
                    <label for="ConfirmPassword" class="input-group-text">Potwierdzenie hasła:</label>
                    <InputText @bind-Value="@trainerDto.ConfirmPassword" class="form-control" type="password" disabled="@isDisabled"></InputText>
                </div>
                <ValidationMessage For="@(() => trainerDto.ConfirmPassword)" />
            </div>
            <div class="form-group">
                <div class="input-group">
                    <label for="FirstName" class="input-group-text">Imię:</label>
                    <InputText @bind-Value="@trainerDto.FirstName" class="form-control" disabled="@isDisabled"></InputText>
                </div>
                <ValidationMessage For="@(() => trainerDto.FirstName)" />
            </div>
            <div class="form-group">
                <div class="input-group">
                    <label for="LastName" class="input-group-text">Nazwisko:</label>
                    <InputText @bind-Value="@trainerDto.LastName" class="form-control" disabled="@isDisabled"></InputText>
                </div>
                <ValidationMessage For="@(() => trainerDto.LastName)" />
            </div>
            <div class="form-group">
                <div class="input-group">
                    <label for="PhoneNr" class="input-group-text">Numer tel.:</label>
                    <InputText @bind-Value="@trainerDto.PhoneNr" class="form-control" disabled="@isDisabled"></InputText>
                </div>
                <ValidationMessage For="@(() => trainerDto.PhoneNr)" />
            </div>
            <div class="form-group">
                <div class="input-group">
                    <label for="Pesel" class="input-group-text">Pesel:</label>
                    <InputText @bind-Value="@trainerDto.Pesel" class="form-control" disabled="@isDisabled"></InputText>
                </div>
                <ValidationMessage For="@(() => trainerDto.Pesel)" />
            </div>
            <div class="form-group">
                <div class="input-group">
                    <label for="Sal" class="input-group-text">Wynagrodzenie:</label>
                    <InputNumber @bind-Value="@trainerDto.Salary" class="form-control" disabled="@isDisabled"></InputNumber>
                </div>
                <ValidationMessage For="@(() => trainerDto.Salary)" />
                <ValidationMessage For="@(() => trainerDto.SpecializationIds)" />
            </div>
            <br />
            <div class="form-group">
                <input type="submit" class="btn btn-primary" value=@(FormMode != "edit" ? "Zapisz" : "Aktualizuj") />
                <input type="button" class="btn btn-primary" @onclick=@Cancel value="Anuluj" />
            </div>
        </div>
    </EditForm>
    <div class="col-md-4 mb-3">
        <label for="Spec" class="control-label">Specializacje</label>
        <button @onclick="AddValue" class="btn btn-primary ms-auto">Dodaj</button>
        @for (int i = 0; i < trainerDto.SpecializationIds.Count; i++)
        {
            int index = i;
            <div class="d-flex justify-content-between align-items-baseline">
                <select form="Spec" class="form-control" @onchange="(e) => UpdateValue(index, Convert.ToInt32(e.Value))" value="@trainerDto.SpecializationIds[i]">
                    <option selected style="display:none"> -- wybierz specjalizację -- </option>
                    @if (specializations != null)
                    {
                        @foreach (var spec in specializations)
                        {
                            <option value="@spec.Id">@spec.SpecName</option>
                        }
                    }
                </select>
                <button @onclick="() => RemoveValue(index)" class="btn btn-outline-danger">Usuń</button>
            </div>
        }

    </div>
</div>

@code {
    [Parameter]
    public string CurrentID { get; set; }
    [Parameter]
    public string FormMode { get; set; }

    ICollection<SpecializationDto> specializations = new List<SpecializationDto>();
    TrainerDto trainerDto = new TrainerDto();
    bool isDisabled;

    protected override async Task OnInitializedAsync()
    {
        if (FormMode == "details")
        {
            isDisabled = true;
        }
        specializations = await _httpClient.GetFromJsonAsync<ICollection<SpecializationDto>>("api/specialization");
        @if (FormMode == "edit")
        {
            var fetchedTrainer = await _httpClient.GetFromJsonAsync<TrainerDto>($"api/trainer/{CurrentID}");
            if (fetchedTrainer != null)
            {
                trainerDto = fetchedTrainer;
            }
        }
    }

    protected void OnValidSubmit()
    {
        if (FormMode != "edit")
        {
            CreateTrainer();
        }
        else
        {
            UpdateTrainer();
        }
    }

    protected async void CreateTrainer()
    {
        await _httpClient.PostAsJsonAsync("api/trainer", trainerDto);
        NavigationManager.NavigateTo("trainerList");
    }

    protected async void UpdateTrainer()
    {
        await _httpClient.PutAsJsonAsync($"api/trainer/{CurrentID}", trainerDto);
        NavigationManager.NavigateTo("trainerList");
    }
    void Cancel()
    {
        NavigationManager.NavigateTo("trainerList");
    }

    private void AddValue() => trainerDto.SpecializationIds.Add(0);
    private void UpdateValue(int i, int value) => trainerDto.SpecializationIds[i] = value;
    private void RemoveValue(int i) => trainerDto.SpecializationIds.RemoveAt(i);
}

@page "/trainerList"
@using Projekt_Inzynierski.Core.DTOs;
@attribute [Authorize(Roles = "Admin")]
@inject AuthenticationStateProvider authStateProvider
@inject NavigationManager NavigationManager
@inject HttpClient _httpClient

<div class="d-flex justify-content-between">
    <h3>Lista Trenerów</h3>
    <div class="hstack gap-1">
        <div class="input-group">
            <input type="text" class="form-control" @bind="@searchPhrase" />
            <input type="button" class="btn btn-primary" @onclick=@Search value="Szukaj" />
        </div>
        <NavLink class="nav-link" href="trainerAdd">
            <input type="button" class="btn btn-success" value="+ Dodaj" />
        </NavLink>
    </div>
</div>

@if (trainers == null)
{
    <p><em>Ładowanie...</em></p>
}
else
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Imię</th>
                <th>Nazwisko</th>
                <th>Numer tel.</th>
                <th>Email</th>
                <th>Pesel</th>
                <th>Wynagrodzenie</th>
                <th>Koniec umowy</th>
                <th>Specjalizacje</th>
                <th>Operacja</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var trainer in trainers)
            {
                <tr>
                    <td class="align-middle">@trainer.FirstName</td>
                    <td class="align-middle">@trainer.LastName</td>
                    <td class="align-middle">@trainer.PhoneNr</td>
                    <td class="align-middle">@trainer.Email</td>
                    <td class="align-middle">@trainer.Pesel</td>
                    <td class="align-middle">@trainer.Salary</td>
                    <td class="align-middle">@(trainer.EmployedTo is null ? null : ((DateTime)trainer.EmployedTo).ToShortDateString())</td>
                    <td class="align-middle">
                        @foreach (var specialization in trainer.SpecializationNames)
                        {
                            <p>@specialization</p>
                        }
                    </td>
                    <td class="align-middle">
                        <div class="hstack">
                            <a class="nav-link" href="trainerForm/details/@trainer.Id">
                                <span class="oi oi-magnifying-glass" aria-hidden="true"></span>
                            </a>
                            <a class="nav-link" href="trainerForm/edit/@trainer.Id">
                                <span class="oi oi-pencil" aria-hidden="true"></span>
                            </a>
                            <a class="nav-link" href="" @onclick="@(() => {DeleteTrainer(trainer.Id); })">
                                <span class="oi oi-trash" aria-hidden="true"></span>
                            </a>
                        </div>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    ICollection<TrainerViewDto> trainers = new List<TrainerViewDto>();
    private string searchPhrase;

    protected override async Task OnInitializedAsync()
    {
        var customAuthStateProvider = (CustomAuthenticationStateProvider)authStateProvider;
        var token = await customAuthStateProvider.GetToken();
        if (!string.IsNullOrEmpty(token))
        {
            _httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);
            trainers = await _httpClient.GetFromJsonAsync<ICollection<TrainerViewDto>>($"api/trainer?searchPhrase={searchPhrase}");
        }
        else
        {
            NavigationManager.NavigateTo("/login");
        }
    }

    protected async void DeleteTrainer(int id)
    {
        var customAuthStateProvider = (CustomAuthenticationStateProvider)authStateProvider;
        var token = await customAuthStateProvider.GetToken();
        if (!string.IsNullOrEmpty(token))
        {
            _httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);
            await _httpClient.DeleteAsync($"api/trainer/{id}");
            NavigationManager.NavigateTo("trainerList");
        }
        else
        {
            NavigationManager.NavigateTo("/login");
        }
    }

    protected async void Search()
    {
        await OnInitializedAsync();
        StateHasChanged();
    }
}

@page "/clientAdd"
@page "/clientForm/{FormMode}/{CurrentID}"
@using Projekt_Inzynierski.Core.DTOs;
@attribute [Authorize(Roles = "Employee")]
@inject AuthenticationStateProvider authStateProvider
@inject NavigationManager NavigationManager
@inject HttpClient _httpClient
@inject IBlazorDownloadFileService BlazorDownloadFileService

<h3>Dane Klienta</h3>
<hr />
<div>
    <div class="row gap-5">
        <div class="col-md-4">
            @if (FormMode is null)
            {
                <EditForm Model="@clientRegisterDto" OnValidSubmit=@OnValidSubmit class="vstack gap-3">
                    <FluentValidationValidator />
                    <div class="form-group" hidden>
                        <input for="Id" class="form-control" @bind="@clientRegisterDto.Id" />
                    </div>
                    <div class="form-group">
                        <div class="input-group">
                            <label for="Email" class="input-group-text col-md-3">Email:</label>
                            <InputText @bind-Value="@clientRegisterDto.Email" class="form-control" disabled="@isDisabled"></InputText>
                        </div>
                        <span class="text-danger">@emailIsTakenMess</span>
                        <ValidationMessage For="@(() => clientRegisterDto.Email)" />
                    </div>
                    <div class="form-group">
                        <div class="input-group">
                            <label for="Password" class="input-group-text col-md-3">Hasło:</label>
                            <InputText @bind-Value="@clientRegisterDto.Password" class="form-control" type="password" disabled="@isDisabled"></InputText>
                        </div>
                        <ValidationMessage For="@(() => clientRegisterDto.Password)" />
                    </div>
                    <div class="form-group">
                        <div class="input-group">
                            <label for="ConfirmPassword" class="input-group-text col-md-3">Powtórz hasło:</label>
                            <InputText @bind-Value="@clientRegisterDto.ConfirmPassword" class="form-control" type="password" disabled="@isDisabled"></InputText>
                        </div>
                        <ValidationMessage For="@(() => clientRegisterDto.ConfirmPassword)" />
                    </div>
                    <div class="form-group">
                        <div class="input-group">
                            <label for="FirstName" class="input-group-text col-md-3">Imię:</label>
                            <InputText @bind-Value="@clientRegisterDto.FirstName" class="form-control" disabled="@isDisabled"></InputText>
                        </div>
                        <ValidationMessage For="@(() => clientRegisterDto.FirstName)" />
                    </div>
                    <div class="form-group">
                        <div class="input-group">
                            <label for="LastName" class="input-group-text col-md-3">Nazwisko:</label>
                            <InputText @bind-Value="@clientRegisterDto.LastName" class="form-control" disabled="@isDisabled"></InputText>
                        </div>
                        <ValidationMessage For="@(() => clientRegisterDto.LastName)" />
                    </div>
                    <div class="form-group">
                        <div class="input-group">
                            <label for="PhoneNr" class="input-group-text col-md-3">Numer telefonu:</label>
                            <InputText @bind-Value="@clientRegisterDto.PhoneNr" class="form-control" disabled="@isDisabled"></InputText>
                        </div>
                        <span class="text-danger">@phoneNrIsTakenMess</span>
                        <ValidationMessage For="@(() => clientRegisterDto.PhoneNr)" />
                    </div>
                    <div class="form-group">
                        <div class="input-group">
                            <label for="Pesel" class="input-group-text col-md-3">Pesel:</label>
                            <InputText @bind-Value="@clientRegisterDto.Pesel" class="form-control" disabled="@isDisabled"></InputText>
                        </div>
                        <span class="text-danger">@peselIsTakenMess</span>
                        <ValidationMessage For="@(() => clientRegisterDto.Pesel)" />
                    </div>
                    <div class="form-group">
                        <div class="input-group">
                            <label for="ContractId" class="input-group-text col-md-3">Umowa:</label>
                            <InputSelect @bind-Value="@clientRegisterDto.ContractId" class="form-select" disabled="@isDisabled">
                                <option selected style="display:none"> -- wybierz umowę -- </option>
                                @if (contracts != null)
                                {
                                    @foreach (var contract in contracts)
                                    {
                                        <option value="@contract.Id">@contract.Months miesięcy, @contract.MonthlyCost zł miesięcznie</option>
                                    }
                                }
                            </InputSelect>
                        </div>
                        <ValidationMessage For="@(() => clientRegisterDto.ContractId)" />
                    </div>
                    <br />
                    <div class="form-group ms-auto">
                        <input type="submit" class="btn btn-primary" value="Zapisz" />
                        <input type="button" class="btn btn-primary" @onclick=@Cancel value="Anuluj" />
                    </div>
                </EditForm>
            }
            else
            {
                <EditForm Model="@clientViewDto" OnValidSubmit=@OnValidSubmit class="vstack gap-3">
                    <FluentValidationValidator />
                    <div class="form-group" hidden>
                        <input for="Id" class="form-control" @bind="@clientViewDto.Id" />
                    </div>
                    <div class="form-group">
                        <div class="input-group">
                            <label for="Email" class="input-group-text col-md-3">Email:</label>
                            <InputText @bind-Value="@clientViewDto.Email" class="form-control" disabled="@isDisabled"></InputText>
                        </div>
                        <span class="text-danger">@emailIsTakenMess</span>
                        <ValidationMessage For="@(() => clientViewDto.Email)" />
                    </div>
                    <div class="form-group">
                        <div class="input-group">
                            <label for="FirstName" class="input-group-text col-md-3">Imię:</label>
                            <InputText @bind-Value="@clientViewDto.FirstName" class="form-control" disabled="@isDisabled"></InputText>
                        </div>
                        <ValidationMessage For="@(() => clientViewDto.FirstName)" />
                    </div>
                    <div class="form-group">
                        <div class="input-group">
                            <label for="LastName" class="input-group-text col-md-3">Nazwisko:</label>
                            <InputText @bind-Value="@clientViewDto.LastName" class="form-control" disabled="@isDisabled"></InputText>
                        </div>
                        <ValidationMessage For="@(() => clientViewDto.LastName)" />
                    </div>
                    <div class="form-group">
                        <div class="input-group">
                            <label for="PhoneNr" class="input-group-text col-md-3">Numer telefonu:</label>
                            <InputText @bind-Value="@clientViewDto.PhoneNr" class="form-control" disabled="@isDisabled"></InputText>
                        </div>
                        <span class="text-danger">@phoneNrIsTakenMess</span>
                        <ValidationMessage For="@(() => clientViewDto.PhoneNr)" />
                    </div>
                    <div class="form-group">
                        <div class="input-group">
                            <label for="Pesel" class="input-group-text col-md-3">Pesel:</label>
                            <InputText @bind-Value="@clientViewDto.Pesel" class="form-control" disabled="@isDisabled"></InputText>
                        </div>
                        <span class="text-danger">@peselIsTakenMess</span>
                        <ValidationMessage For="@(() => clientViewDto.Pesel)" />
                    </div>
                    <div class="form-group">
                        <div class="input-group">
                            <label for="ContractId" class="input-group-text col-md-3">Umowa:</label>
                            <InputSelect @bind-Value="@clientViewDto.ContractId" class="form-select" disabled="@isDisabled">
                                <option selected style="display:none"> -- wybierz umowę -- </option>
                                @if (contracts != null)
                                {
                                    @foreach (var contract in contracts)
                                    {
                                        <option value="@contract.Id">@contract.Months miesięcy, @contract.MonthlyCost zł miesięcznie</option>
                                    }
                                }
                            </InputSelect>
                        </div>
                        <ValidationMessage For="@(() => clientViewDto.ContractId)" />
                    </div>
                    <br />
                    @if (!isDisabled)
                    {
                        <div class="form-group ms-auto">
                            <input type="submit" class="btn btn-primary" value="Aktualizuj" />
                            <input type="button" class="btn btn-primary" @onclick=@Cancel value="Anuluj" />
                        </div>
                    }
                </EditForm>
            }

        </div>
        @if (isDisabled)
        {
            <div class="col-md">
                <h3>Wizyty klienta</h3>
                @if (clientViewDto.Visits == null)
                {
                    <p><em>Ładowanie...</em></p>
                }
                else
                {
                    <table class="table table-striped">
                        <thead>
                            <tr>
                                <th>Dzień wizyty</th>
                                <th>Godzina</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var visit in clientViewDto.Visits)
                            {
                                <tr>
                                    <td>@visit.VisitDate.ToShortDateString()</td>
                                    <td>@visit.VisitDate.ToShortTimeString()</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                }
            </div>
        }
    </div>
</div>
@code {
    [Parameter]
    public string CurrentID { get; set; }
    [Parameter]
    public string FormMode { get; set; }

    ClientAccountDto clientRegisterDto = new ClientAccountDto();
    ClientViewDto clientViewDto = new ClientViewDto();
    ICollection<ContractDto> contracts = new List<ContractDto>();
    bool isDisabled;

    string? emailIsTakenMess, phoneNrIsTakenMess, peselIsTakenMess;

    protected override async Task OnInitializedAsync()
    {
        var customAuthStateProvider = (CustomAuthenticationStateProvider)authStateProvider;
        var token = await customAuthStateProvider.GetToken();
        if (!string.IsNullOrEmpty(token))
        {
            _httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);
            if (FormMode == "details")
            {
                isDisabled = true;
            }
            contracts = await _httpClient.GetFromJsonAsync<ICollection<ContractDto>>("api/contract");
            if (FormMode == "edit" || FormMode == "details")
            {
                var fetchedClient = await _httpClient.GetFromJsonAsync<ClientViewDto>($"api/client/{CurrentID}");
                if (fetchedClient != null)
                {
                    clientViewDto = fetchedClient;
                }
            }
        }
        else
        {
            NavigationManager.NavigateTo("/login");
        }


    }

    protected void OnValidSubmit()
    {
        emailIsTakenMess = null; phoneNrIsTakenMess = null; peselIsTakenMess = null;
        if (FormMode != "edit")
        {
            CreateClient();
        }
        else
        {
            UpdateClient();
        }
    }

    protected async void CreateClient()
    {
        var customAuthStateProvider = (CustomAuthenticationStateProvider)authStateProvider;
        var token = await customAuthStateProvider.GetToken();
        if (!string.IsNullOrEmpty(token))
        {
            _httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);
            var response = await _httpClient.PostAsJsonAsync("api/client", clientRegisterDto);
            if (response.IsSuccessStatusCode)
            {
                byte[] bytes = await response.Content.ReadAsByteArrayAsync();
                await BlazorDownloadFileService.DownloadFile($"Umowa_{clientRegisterDto.FirstName}-{clientRegisterDto.LastName}.pdf", bytes, contentType: "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet");
                NavigationManager.NavigateTo("clientList");
            }
            else if ((int)response.StatusCode == 422)
            {
                emailIsTakenMess = await response.Content.ReadAsStringAsync();
                StateHasChanged();
            }
            else if ((int)response.StatusCode == 423)
            {
                peselIsTakenMess = await response.Content.ReadAsStringAsync();
                StateHasChanged();
            }
            else if ((int)response.StatusCode == 424)
            {
                phoneNrIsTakenMess = await response.Content.ReadAsStringAsync();
                StateHasChanged();
            }
        }
        else
        {
            NavigationManager.NavigateTo("/login");
        }
    }

    protected async void UpdateClient()
    {
        var customAuthStateProvider = (CustomAuthenticationStateProvider)authStateProvider;
        var token = await customAuthStateProvider.GetToken();
        if (!string.IsNullOrEmpty(token))
        {
            _httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);
            var response = await _httpClient.PutAsJsonAsync($"api/client/{CurrentID}", clientViewDto);
            if (response.IsSuccessStatusCode)
            {
                byte[] bytes = await response.Content.ReadAsByteArrayAsync();
                await BlazorDownloadFileService.DownloadFile($"Aneks_do_Umowy_{clientViewDto.FirstName}-{clientViewDto.LastName}.pdf", bytes, contentType: "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet");
                NavigationManager.NavigateTo("clientList");
            }
            else if ((int)response.StatusCode == 422)
            {
                emailIsTakenMess = await response.Content.ReadAsStringAsync();
                StateHasChanged();
            }
            else if ((int)response.StatusCode == 423)
            {
                peselIsTakenMess = await response.Content.ReadAsStringAsync();
                StateHasChanged();
            }
            else if ((int)response.StatusCode == 424)
            {
                phoneNrIsTakenMess = await response.Content.ReadAsStringAsync();
                StateHasChanged();
            }
        }
        else
        {
            NavigationManager.NavigateTo("/login");
        }
    }
    void Cancel()
    {
        NavigationManager.NavigateTo("clientList");
    }
}

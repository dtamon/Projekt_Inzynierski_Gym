@page "/groupTrainingList"
@using Projekt_Inzynierski.Core.DTOs;
@attribute [Authorize(Roles = "Client,Trainer")]
@inject NavigationManager NavigationManager
@inject HttpClient _httpClient
@inject AuthenticationStateProvider authStateProvider

<div class="d-flex justify-content-between">
    <h3>Lista Treningów</h3>
    <NavLink class="nav-link" href="groupTrainingAdd">
        <input type="button" class="btn btn-success" value="+ Dodaj" />
    </NavLink>
</div>

@if (groupTrainings == null)
{
    <p><em>Ładowanie...</em></p>
}
else
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Typ treningu</th>
                <th>Limit miejsc</th>
                <th>Ilość wolnych miejsc</th>
                <th>Data i godzina rozpoczęcia</th>
                <th>Trenerzy</th>
                <th>Operacje</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var groupTraining in groupTrainings)
            {
                <tr>
                    <td>@groupTraining.TrainingType</td>
                    <td>@groupTraining.MaxClients</td>
                    <td>@groupTraining.FreeSpots</td>
                    <td>@groupTraining.StartDate.ToShortDateString() @groupTraining.StartDate.ToShortTimeString()</td>
                    <td>
                        @foreach (var trainer in groupTraining.Trainers)
                        {
                            <p>@trainer.FirstName @trainer.LastName</p>
                        }
                    </td>
                    <td class="hstack">
                        @if (Role == "Trainer")
                        {
                            <a class="nav-link" href="groupTrainingForm/edit/@groupTraining.Id">
                                <span class="oi oi-pencil" aria-hidden="true"></span>
                            </a>
                            <a class="nav-link" href="" @onclick="@(() => {DeleteGroupTraining(groupTraining.Id); })">
                                <span class="oi oi-trash" aria-hidden="true"></span>
                            </a>
                        }
                        else if (Role == "Client")
                        {
                            <a class="nav-link" href="" @onclick="@(() => {SignUpForTraining(groupTraining.Id); })">
                                <span class="btn btn-success" aria-hidden="true">Zapisz się</span>
                            </a>
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {

    ICollection<GroupTrainingDto> groupTrainings = new List<GroupTrainingDto>();

    private string Role = "";

    protected override async Task OnInitializedAsync()
    {
        var customAuthStateProvider = (CustomAuthenticationStateProvider)authStateProvider;
        Role = await customAuthStateProvider.GetRole();
        var token = await customAuthStateProvider.GetToken();
        _httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);

        if (!string.IsNullOrEmpty(token))
        {
            if (Role == "Trainer")
            {
                groupTrainings = await _httpClient.GetFromJsonAsync<ICollection<GroupTrainingDto>>("api/groupTraining/yourGroupTrainings");
            } 
            else if (Role == "Client")
            {
                groupTrainings = await _httpClient.GetFromJsonAsync<ICollection<GroupTrainingDto>>("api/groupTraining/trainingsNotSignedUp");
            }

        }
        else
            NavigationManager.NavigateTo("/login");
    }

    protected async void DeleteGroupTraining(int id)
    {
        var customAuthStateProvider = (CustomAuthenticationStateProvider)authStateProvider;
        var token = await customAuthStateProvider.GetToken();
        if (!string.IsNullOrEmpty(token))
        {
            _httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);
            await _httpClient.DeleteAsync($"api/groupTraining/{id}");
            NavigationManager.NavigateTo("groupTrainingList/yours");
        }
        else
            NavigationManager.NavigateTo("/login");
        
    }

    protected async void SignUpForTraining(int id)
    {
        var customAuthStateProvider = (CustomAuthenticationStateProvider)authStateProvider;
        var token = await customAuthStateProvider.GetToken();
        if (!string.IsNullOrEmpty(token))
        {
            _httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);
            await _httpClient.PostAsJsonAsync($"api/groupTraining/signUp/{id}", id);
            NavigationManager.NavigateTo("groupTrainingList/clientTrainings");
        }
        else
            NavigationManager.NavigateTo("/login");
    }
}

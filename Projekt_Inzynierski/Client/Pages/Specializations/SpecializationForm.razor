@page "/specializationAdd"
@page "/specializationForm/{FormMode}/{CurrentID}"
@using Projekt_Inzynierski.Core.DTOs;
@inject NavigationManager NavigationManager
@inject HttpClient _httpClient

<h3>Specjalizacja</h3>
<hr />
<div class="row gap-5">
    <div class="col-md-4">
        <EditForm Model="@specializationDto" OnValidSubmit=@OnValidSubmit class="vstack gap-3">
            <FluentValidationValidator />
            <div class="form-group" hidden>
                <input for="IdSpec" class="form-control" @bind="@specializationDto.Id" />
            </div>
            <div class="form-group">
                <div class="input-group">
                    <label for="Spec" class="input-group-text col-md-3">Specjalizacja:</label>
                    <InputText @bind-Value="@specializationDto.SpecName" class="form-control" disabled="@isDisabled"></InputText>
                </div>
                <ValidationMessage For="@(() => specializationDto.SpecName)" />
            </div>
            <br />
            @if (!isDisabled)
            {
                <div class="form-group ms-auto">
                    <input type="submit" class="btn btn-primary" value=@(FormMode != "edit" ? "Zapisz" : "Aktualizuj") />
                    <input type="button" class="btn btn-primary" @onclick=@Cancel value="Anuluj" />
                </div>
            }
        </EditForm>
    </div>
    @if (isDisabled)
    {
        <div class="col-md">
            <h3>Trenerzy posiadający tą specjalizację</h3>
            @if (specializationDto.Trainers == null)
            {
                <p><em>Ładowanie...</em></p>
            }
            else
            {
                <table class="table table-striped">
                    <thead>
                        <tr>
                            <th>Imię</th>
                            <th>Nazwisko</th>
                            <th>Numer tel.</th>
                            <th>Email</th>
                            <th>Pesel</th>
                            <th>Koniec umowy</th>
                            <th>Wynagrodzenie</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var trainer in specializationDto.Trainers)
                        {
                            <tr>
                                <td>@trainer.FirstName</td>
                                <td>@trainer.LastName</td>
                                <td>@trainer.PhoneNr</td>
                                <td>@trainer.Email</td>
                                <td>@trainer.Pesel</td>
                                <td>@(trainer.EmployedTo is null ? null : ((DateTime)trainer.EmployedTo).ToShortDateString())</td>
                                <td>@trainer.Salary</td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
        </div>
    }
</div>

@code {
    [Parameter]
    public string CurrentID { get; set; }
    [Parameter]
    public string FormMode { get; set; }

    SpecializationDto specializationDto = new SpecializationDto();
    bool isDisabled;

    protected override async Task OnInitializedAsync()
    {
        if (FormMode == "details")
        {
            isDisabled = true;
        }
        @if (FormMode == "edit" || FormMode == "details")
        {
            var fetchedSpecialization = await _httpClient.GetFromJsonAsync<SpecializationDto>($"api/specialization/{CurrentID}");
            if (fetchedSpecialization != null)
            {
                specializationDto = fetchedSpecialization;
            }
        }
    }

    protected void OnValidSubmit()
    {
        if (FormMode != "edit")
        {
            CreateSpecialization();
        }
        else
        {
            UpdateSpecialization();
        }
    }

    protected async void CreateSpecialization()
    {
        await _httpClient.PostAsJsonAsync("api/specialization", specializationDto);
        NavigationManager.NavigateTo("specializationList");
    }

    protected async void UpdateSpecialization()
    {
        await _httpClient.PutAsJsonAsync($"api/specialization/{CurrentID}", specializationDto);
        NavigationManager.NavigateTo("specializationList");
    }
    void Cancel()
    {
        NavigationManager.NavigateTo("specializationList");
    }
}
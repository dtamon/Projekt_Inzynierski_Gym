@page "/contractAdd"
@page "/contractForm/{FormMode}/{CurrentID}"
@using Projekt_Inzynierski.Core.DTOs;
@attribute [Authorize(Roles = "Admin")]
@inject AuthenticationStateProvider authStateProvider
@inject NavigationManager NavigationManager
@inject HttpClient _httpClient

<h3>Umowa</h3>
<hr />
<div>
    <div class="row gap-5">
        <div class="col-md-4">
            <EditForm Model="@contractDto" OnValidSubmit=@OnValidSubmit class="vstack gap-3">
                <FluentValidationValidator />
                <div class="form-group" hidden>
                    <input for="Id" class="form-control" @bind="@contractDto.Id" />
                </div>
                <div class="form-group">
                    <div class="input-group">
                        <label for="Months" class="input-group-text col-md-3">Okres miesięcy:</label>
                        <InputNumber @bind-Value="@contractDto.Months" class="form-control" disabled="@isDisabled"></InputNumber>
                    </div>
                    <ValidationMessage For="@(() => contractDto.Months)" />
                </div>
                <div class="form-group">
                    <div class="input-group">
                        <label for="MonthlyCost" class="input-group-text col-md-3">Koszt miesięcznie:</label>
                        <InputNumber @bind-Value="@contractDto.MonthlyCost" class="form-control" disabled="@isDisabled"></InputNumber>
                    </div>
                    <ValidationMessage For="@(() => contractDto.MonthlyCost)" />
                </div>
                <br />
                @if (!isDisabled)
                {
                    <div class="form-group ms-auto">
                        <input type="submit" class="btn btn-primary" value=@(FormMode != "edit" ? "Zapisz" : "Aktualizuj") />
                        <input type="button" class="btn btn-primary" @onclick=@Cancel value="Anuluj" />
                    </div>
                }
            </EditForm>
        </div>
        @if (isDisabled)
        {
            <div class="col-md">
                <h3>Klienci przypisani do umowy</h3>
                @if (contractDto.Clients == null)
                {
                    <p><em>Ładowanie...</em></p>
                }
                else
                {
                    <table class="table table-striped">
                        <thead>
                            <tr>
                                <th>Imię</th>
                                <th>Nazwisko</th>
                                <th>Numer tel.</th>
                                <th>Email</th>
                                <th>Pesel</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var client in contractDto.Clients)
                            {
                                <tr>
                                    <td>@client.FirstName</td>
                                    <td>@client.LastName</td>
                                    <td>@client.PhoneNr</td>
                                    <td>@client.Email</td>
                                    <td>@client.Pesel</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                }
            </div>
        }
    </div>
</div>
@code {
    [Parameter]
    public string CurrentID { get; set; }
    [Parameter]
    public string FormMode { get; set; }

    ContractDto contractDto = new ContractDto();
    bool isDisabled;

    protected override async Task OnInitializedAsync()
    {
        var customAuthStateProvider = (CustomAuthenticationStateProvider)authStateProvider;
        var token = await customAuthStateProvider.GetToken();
        if (!string.IsNullOrEmpty(token))
        {
            _httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);
            if (FormMode == "details")
            {
                isDisabled = true;
            }
            @if (FormMode == "edit" || FormMode == "details")
            {
                var fetchedContract = await _httpClient.GetFromJsonAsync<ContractDto>($"api/contract/{CurrentID}");
                if (fetchedContract != null)
                {
                    contractDto = fetchedContract;
                }
            }
        }
        else
        {
            NavigationManager.NavigateTo("/login");
        }
    }

    protected void OnValidSubmit()
    {
        if (FormMode != "edit")
        {
            CreateContract();
        }
        else
        {
            UpdateContract();
        }
    }

    protected async void CreateContract()
    {
        var customAuthStateProvider = (CustomAuthenticationStateProvider)authStateProvider;
        var token = await customAuthStateProvider.GetToken();
        if (!string.IsNullOrEmpty(token))
        {
            _httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);
            await _httpClient.PostAsJsonAsync("api/contract", contractDto);
            NavigationManager.NavigateTo("contractList");
        }
        else
        {
            NavigationManager.NavigateTo("/login");
        }
    }

    protected async void UpdateContract()
    {
        var customAuthStateProvider = (CustomAuthenticationStateProvider)authStateProvider;
        var token = await customAuthStateProvider.GetToken();
        if (!string.IsNullOrEmpty(token))
        {
            _httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);
            await _httpClient.PutAsJsonAsync($"api/contract/{CurrentID}", contractDto);
            NavigationManager.NavigateTo("contractList");
        }
        else
        {
            NavigationManager.NavigateTo("/login");
        }
    }
    void Cancel()
    {
        NavigationManager.NavigateTo("contractList");
    }
}
